@page "/device/sessions/{sessionId:guid}"
@using MotionController.Sensor.Client;

<PageTitle>Device Session - @SessionId</PageTitle>

<MudText Typo="Typo.h3">Sensors</MudText>

<MudStack Spacing="2">
    <MudItem>
        <MudGrid>
            <MudItem>
                <MudText Typo="Typo.h5">Humidity / Temperature °C</MudText>
                <MudChart ChartType="ChartType.Line" ChartSeries="@HumiditySeries" XAxisLabels="@HumidityXAxisLabels" Width="100%" Height="350px" />
            </MudItem>

            <MudItem>
                <MudText Typo="Typo.h5">Pressure / Temperature °C</MudText>
                <MudChart ChartType="ChartType.Line" ChartSeries="@PressureSeries" XAxisLabels="@PressureXAxisLabels" Width="100%" Height="350px" />
            </MudItem>
        </MudGrid>
    </MudItem>

    <MudItem>
        <MudButton Href="@HumidityUrl">
            <MudPaper Width="240px" Elevation="2">
                <MudText Typo="Typo.h5" Align="Align.Center">Humidity</MudText>
            </MudPaper>
        </MudButton>
    </MudItem>
    <MudItem>
        <MudButton Href="@PressureUrl">
            <MudPaper Width="240px" Elevation="2">
                <MudText Typo="Typo.h5" Align="Align.Center">Pressure</MudText>
            </MudPaper>
        </MudButton>
    </MudItem>
    <MudItem>
        <MudButton Href="@AccelerometerUrl">
            <MudPaper Width="240px" Elevation="2">
                <MudText Typo="Typo.h5" Align="Align.Center">Accelerometer</MudText>
            </MudPaper>
        </MudButton>
    </MudItem>
    <MudItem>
        <MudButton Href="@GyroscopeUrl">
            <MudPaper Width="240px" Elevation="2">
                <MudText Typo="Typo.h5" Align="Align.Center">Gyroscope</MudText>
            </MudPaper>
        </MudButton>
    </MudItem>
    <MudItem>
        <MudButton Href="@MagnetometerUrl">
            <MudPaper Width="240px" Elevation="2">
                <MudText Typo="Typo.h5" Align="Align.Center">Magnetometer</MudText>
            </MudPaper>
        </MudButton>
    </MudItem>
    <MudItem>
        <MudButton Href="@OrientationUrl">
            <MudPaper Width="240px" Elevation="2">
                <MudText Typo="Typo.h5" Align="Align.Center">Orientation</MudText>
            </MudPaper>
        </MudButton>
    </MudItem>
</MudStack>

@inject IDeviceSessionClient DeviceSessionClient
@code {
    [Parameter]
    public Guid SessionId { get; set; }

    private string BaseUrl => $"/device/sessions/{SessionId}/";

    // Environment
    private string HumidityUrl => $"{BaseUrl}humidity";
    private string PressureUrl => $"{BaseUrl}pressure";

    // IMU
    private string AccelerometerUrl => $"{BaseUrl}accelerometer";
    private string GyroscopeUrl => $"{BaseUrl}gyroscope";
    private string MagnetometerUrl => $"{BaseUrl}magnetometer";
    private string OrientationUrl => $"{BaseUrl}orientation";

    private List<ChartSeries> HumiditySeries = new List<ChartSeries>();
    private string[] HumidityXAxisLabels = Array.Empty<string>();

    private List<ChartSeries> PressureSeries = new List<ChartSeries>();
    private string[] PressureXAxisLabels = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        var humidities = await DeviceSessionClient.GetDeviceSessionHumidityAsync(SessionId);

        HumiditySeries.Add(new ChartSeries
            {
                Name = "Humidity Percentage",
                Data = humidities.Select(h => (double)h.HumidityPercentage).ToArray()
            });

        HumiditySeries.Add(new ChartSeries
            {
                Name = "Temperature °C",
                Data = humidities.Select(h => (double)h.TemperatureCelsius).ToArray()
            });

        HumidityXAxisLabels = humidities.Select(h => h.Timestamp.ToShortDateString()).ToArray();

        var pressures = await DeviceSessionClient.GetDeviceSessionPressureAsync(SessionId);

        PressureSeries.Add(new ChartSeries
            {
                Name = "Pressure Millibars",
                Data = pressures.Select(h => (double)h.PressureMillibars).ToArray()
            });

        PressureSeries.Add(new ChartSeries
            {
                Name = "Temperature °C",
                Data = pressures.Select(h => (double)h.TemperatureCelsius).ToArray()
            });

        PressureXAxisLabels = pressures.Select(h => h.Timestamp.ToShortDateString()).ToArray();
    }

    #region Chart testing
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Series 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = "Series 2", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    Random random = new Random();
    public void RandomizeData()
    {
        var new_series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Series 1", Data = new double[9] },
            new ChartSeries() { Name = "Series 2", Data = new double[9] },
        };
        for (int i = 0; i < 9; i++)
        {
            new_series[0].Data[i] = random.NextDouble() * 100;
            new_series[1].Data[i] = random.NextDouble() * 100;
        }
        Series = new_series;
        StateHasChanged();
    }
    #endregion
}